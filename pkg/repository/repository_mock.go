// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	models "prices/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrices is a mock of Prices interface.
type MockPrices struct {
	ctrl     *gomock.Controller
	recorder *MockPricesMockRecorder
}

// MockPricesMockRecorder is the mock recorder for MockPrices.
type MockPricesMockRecorder struct {
	mock *MockPrices
}

// NewMockPrices creates a new mock instance.
func NewMockPrices(ctrl *gomock.Controller) *MockPrices {
	mock := &MockPrices{ctrl: ctrl}
	mock.recorder = &MockPricesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrices) EXPECT() *MockPricesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPrices) Create(ctx context.Context, prices []*models.Price) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, prices)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPricesMockRecorder) Create(ctx, prices interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPrices)(nil).Create), ctx, prices)
}

// Get mocks base method.
func (m *MockPrices) Get(ctx context.Context, id string) (*models.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*models.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPricesMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPrices)(nil).Get), ctx, id)
}

// ImportFile mocks base method.
func (m *MockPrices) ImportFile(ctx context.Context, filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportFile", ctx, filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportFile indicates an expected call of ImportFile.
func (mr *MockPricesMockRecorder) ImportFile(ctx, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportFile", reflect.TypeOf((*MockPrices)(nil).ImportFile), ctx, filePath)
}
