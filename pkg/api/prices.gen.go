// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Promotion Promotion data.
type Promotion struct {
	// ExpirationDate Expiration date of the promotion.
	ExpirationDate time.Time `json:"expiration_date"`

	// Id Id of the promotion.
	Id string `json:"id"`

	// Price Price of the promotion.
	Price float64 `json:"price"`
}

// PromotionId defines model for promotion_id.
type PromotionId = string

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /promotions/{promotion_id})
	GetPromotion(c *gin.Context, promotionId PromotionId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPromotion operation middleware
func (siw *ServerInterfaceWrapper) GetPromotion(c *gin.Context) {

	var err error

	// ------------- Path parameter "promotion_id" -------------
	var promotionId PromotionId

	err = runtime.BindStyledParameter("simple", false, "promotion_id", c.Param("promotion_id"), &promotionId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter promotion_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPromotion(c, promotionId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/promotions/:promotion_id", wrapper.GetPromotion)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5SUUY+bMAzHvwry9pgStqumE2/3ME19O+31Vk0pmJITxFliqjtVfPfJUKA3uk33hBI7",
	"9s9/25yhoNaTQ8cR8jN4E0yLjGE8BWqJLbmftpRzibEI1ssN5LArE6oSrjGZ/VJQYMXmDdegwJkW5XQd",
	"R0HAX50NWELOoUMFsaixNZKAX734Rw7WHaHv+8k44DxOYdYssykpDRvB8IE8BrY4PMUXb4MZEErDuA7w",
	"dXaQCHizsopCaxhyEI8N2xZB/Yms4B1Srd76YAu8VZ0t/odE3aG54nFde8AACl42R9pcLquGDH/Zgui6",
	"NOEJhq6MudVKqv0ckw7PWPDYFusqWoM+PO6SikIyAMfkwfv0hxMoyw1OhURQcMIQxydZmqWfpHby6Iy3",
	"kMNdmqV3QmS4Hrqn55qjPl8PUy/WI/Ka5DtyF9wiVnJ4TSzHxJYim4zGUOKuhBy+IS+jpd7swNMZPgas",
	"IIcPetkUvbjoN7Pd70XY6MnFce4+Z5l8CnKMbsA03je2GJLr5zjO8rIAt5JdNkAvjEMH/rYAFXWuTEXR",
	"bbb916Y44tm5V8DmKAUvDhH24wZiOE1idKGBHGpmn2vdUGGamiLn99l9po23+pRpP/ZYpLiEPE//gavQ",
	"/b7/HQAA///Gdn3CfAQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
